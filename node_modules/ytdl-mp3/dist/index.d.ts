type DownloaderOptions = {
    customSearchTerm?: null | string;
    getTags?: boolean;
    outputDir?: string;
    silentMode?: boolean;
    verifyTags?: boolean;
};
type DownloaderItemInformation = {
    album: null | string;
    artist: null | string;
    genre: null | string;
    outputFile: string;
    trackNo: null | number;
    year: null | string;
};
declare class Downloader {
    static defaultDownloadsDir: string;
    customSearchTerm: null | string;
    getTags: boolean;
    outputDir: string;
    silentMode: boolean;
    verifyTags: boolean;
    constructor({ customSearchTerm, getTags, outputDir, silentMode, verifyTags }: DownloaderOptions);
    downloadSong(url: string): Promise<DownloaderItemInformation>;
    /** Returns the content from the video as a buffer */
    private downloadVideo;
    /** Returns the absolute path to the audio file to be downloaded */
    private getOutputFile;
}

declare class FormatConverter {
    private readonly ffmpegBinary;
    constructor();
    videoToAudio(videoData: Buffer, outputFile: string): void;
}

type SearchResult = {
    artistName: string;
    artworkUrl100: string;
    collectionName: string;
    primaryGenreName: string;
    releaseDate: string;
    trackName: string;
    trackNumber: number;
};
type SearchData = {
    resultCount: number;
    results: SearchResult[];
};
type AlbumArt = {
    description: string;
    imageBuffer: Buffer;
    mime: string;
    type: number;
};
type SongTags = {
    album: string;
    APIC: AlbumArt;
    artist: string;
    genre: string;
    title: string;
    TRCK: number;
    year: string;
};
declare class SongTagsSearch {
    private searchTerm;
    private url;
    constructor(searchTerm: string);
    search(verify?: boolean): Promise<SongTags>;
    private fetchAlbumArt;
    private fetchResults;
    private getVerifiedResult;
}

/**
 * Custom error class representing unrecoverable errors intentionally thrown by ytdl-mp3
 */
declare class YtdlMp3Error extends Error {
    constructor(message: string, options?: ErrorOptions);
}

export { type AlbumArt, Downloader, type DownloaderOptions, FormatConverter, type SearchData, type SearchResult, type SongTags, SongTagsSearch, YtdlMp3Error };
